# 将私有仓库中合并到 main 分支的代码通过创建 PR 的方式提交到公开仓库中，
# 同时只有 label 不为 no publish 的 PR 才会被提交到公开仓库中，是为了方便在私有仓库中提交不便公开的定制化内容
# 使用方法：需要修改 pub_repo_owner 的值为公开仓库的拥有者, 同时设置 PAT 环境变量

name: "Copy pr to publish repository"

on:
  pull_request:
    types:
      - closed
#      - synchronize

permissions:
  contents: read
  pull-requests: write

jobs:
  copy_pr:
    if: (github.event.pull_request.base.ref == 'main' && github.event.pull_request.merged == true && !startsWith(github.event.pull_request.title, 'chore(self)'))
    runs-on: ubuntu-latest
    steps:
      - name: Set output
        id: var
        run: |
          pub_repository="functionx/fx-core"
          echo "pub_repository=$pub_repository" >> "$GITHUB_OUTPUT"
          pr_branch_name=${{ github.event.pull_request.head.ref }}
          echo "pr_branch_name=$pr_branch_name" >> "$GITHUB_OUTPUT"
          base_pr_number=$(echo "${{ github.event.pull_request.title }}" | cut -d '(' -f2 | cut -d ')' -f1)
          echo "reference_url=${{ github.server_url }}/$pub_repository/pull/$pr_branch_name" >> "$GITHUB_OUTPUT"
          if [[ $base_pr_number -gt 0 ]]; then
            echo "base_branch_name=$(gh pr view $base_pr_number --repo $pub_repository --json headRefName --jq .headRefName)" >> "$GITHUB_OUTPUT"
          else
            echo "base_branch_name=main" >> "$GITHUB_OUTPUT"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Checkout
        id: checkout
        run: |
          git config --global user.email "80246097+zakir-code@users.noreply.github.com"
          git config --global user.name "zakir"
          git init
          git remote add origin ${{ github.server_url }}/${{ github.repository }}
          gh auth setup-git
          git fetch origin main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone public repo
        id: repo
        run: |
          git remote add pub-repo ${{ github.server_url }}/${{ steps.var.outputs.pub_repository }}.git
          gh auth setup-git
          git fetch pub-repo ${{ steps.var.outputs.base_branch_name }} --depth=1
          git checkout -b ${{ steps.var.outputs.pr_branch_name }} pub-repo/${{ steps.var.outputs.base_branch_name }}
          git cherry-pick ${{ github.event.pull_request.merge_commit_sha }}
          git commit --amend -m "${{ github.event.pull_request.title }}" --no-edit
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Create PR
        id: create-pr
        run: |
          git push --set-upstream pub-repo ${{ steps.var.outputs.pr_branch_name }}
          body=""
          if [[ ${{ steps.var.outputs.base_branch_name }} != "main" ]]; then
            body="Ref: ${{ steps.var.outputs.reference_url }}"
          fi
          gh pr create --title "${{ github.event.pull_request.title }}" --body "$body" --head ${{ steps.var.outputs.pr_branch_name }} --base ${{ steps.var.outputs.base_branch_name }} --repo ${{ steps.var.outputs.pub_repository }}
        env:
          GH_TOKEN: ${{ secrets.PAT }}

        # When the previous steps fails, the workflow would stop. By adding this
        # condition you can continue the execution with the populated error message.
      - if: ${{ always() && (steps.create-pr.conclusion != 'success' || steps.repo.conclusion != 'success') }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: copy-pr-error
          message: |
            @xteam001/fxcore 请注意，Copy PR 运行失败，可以尝试手动再次运行。

        # Delete a previous comment when the issue has been resolved
      - if: ${{ steps.create-pr.conclusion == 'success' || steps.repo.conclusion == 'success' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: copy-pr-error
          delete: true

      - uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ steps.create-pr.conclusion == 'success' || steps.repo.conclusion == 'success' }}
        with:
          header: reference
          message: Please go to ${{ steps.var.outputs.reference_url }} to continue the review
