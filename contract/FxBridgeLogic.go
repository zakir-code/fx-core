// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FxBridgeLogicBridgeToken is an auto generated low-level Go binding around an user-defined struct.
type FxBridgeLogicBridgeToken struct {
	Addr     common.Address
	Name     string
	Symbol   string
	Decimals uint8
}

// FxBridgeLogicABI is the input ABI used to generate the binding from.
const FxBridgeLogicABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_channelIBC\",\"type\":\"bytes32\"}],\"name\":\"AddBridgeTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_dstChainId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_asset\",\"type\":\"bytes\"}],\"name\":\"BridgeCallEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newOracleSetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"OracleSetUpdatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_targetIBC\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToFxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"activeBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_channelIBC\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isOriginated\",\"type\":\"bool\"}],\"name\":\"addBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dstChainId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_asset\",\"type\":\"bytes\"}],\"name\":\"bridgeCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"checkAssetStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_theHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"}],\"name\":\"checkOracleSignatures\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_asset\",\"type\":\"bytes\"}],\"name\":\"decodeType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeTokenList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"structFxBridgeLogic.BridgeToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fxBridgeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_oracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_fxBridgeId\",\"type\":\"bytes32\"}],\"name\":\"makeCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"pauseBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_targetIBC\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToFx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_fxBridgeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastOracleSetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastOracleSetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_powerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_nonceArray\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchTimeout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceive\",\"type\":\"address\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOriginated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_newOracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentOracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"updateOracleSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// FxBridgeLogicBin is the compiled bytecode used for deploying new contracts.
var FxBridgeLogicBin = "0x608060405234801561001057600080fd5b50613ad9806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370e5a89811610104578063aa63a894116100a2578063e5a2b5d211610071578063e5a2b5d214610441578063f1099f611461044a578063f2fde38b1461045d578063f92367fd14610470576101da565b8063aa63a894146103f2578063bb83bf9614610405578063dde65aea1461040e578063df97174b14610421576101da565b806373b20547116100de57806373b20547146103bd5780638456cb59146103c65780638da5cb5b146103ce578063a36a4ab0146103df576101da565b806370e5a89814610377578063715018a6146103a257806371cbf381146103aa576101da565b80633f4ba83a1161017c5780635c975abb1161014b5780635c975abb1461033d5780636189d107146103485780636907f2e61461035b57806370a0eb941461036e576101da565b80633f4ba83a146102cd5780634157a36c146102d5578063474d561c146102f657806354fd4d5014610328576101da565b8063285a190a116101b8578063285a190a1461026f57806331678cf614610284578063332caa1f146102a75780633a08e299146102ba576101da565b8063011b2174146101df5780630acac94214610205578063283040b41461025a575b600080fd5b6101f26101ed366004612c68565b610479565b6040519081526020015b60405180910390f35b61023b610213366004612c68565b60d06020526000908152604090205460ff808216916101008104821691620100009091041683565b60408051931515845291151560208401521515908201526060016101fc565b610262610498565b6040516101fc9190613515565b61028261027d366004612ed5565b610751565b005b610297610292366004612c82565b610908565b60405190151581526020016101fc565b6102826102b5366004612d2b565b6109ba565b6102826102c8366004612fb3565b610f95565b610282611192565b6102e86102e33660046131d8565b6111ac565b6040516101fc92919061368f565b610297610304366004612c68565b6001600160a01b0316600090815260d0602052604090205462010000900460ff1690565b6103306111cc565b6040516101fc919061367c565b60975460ff16610297565b610282610356366004612cf3565b61125a565b610282610369366004613354565b61142b565b6101f260cc5481565b61038a610385366004613427565b6114c0565b6040516001600160a01b0390911681526020016101fc565b6102826114ea565b6101f26103b83660046130d9565b6114fc565b6101f260cb5481565b610282611549565b6065546001600160a01b031661038a565b6102976103ed366004612c68565b611561565b610282610400366004613165565b611677565b6101f260cd5481565b61029761041c366004612c68565b611909565b6101f261042f366004612c68565b60ce6020526000908152604090205481565b6101f260ca5481565b610297610458366004612cb4565b611a1e565b61028261046b366004612c68565b611cbe565b6101f260c95481565b6001600160a01b038116600090815260ce60205260409020545b919050565b60cf546060906000906001600160401b038111156104c657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561052e57816020015b61051b604051806080016040528060006001600160a01b031681526020016060815260200160608152602001600060ff1681525090565b8152602001906001900390816104e45790505b50905060005b60cf5481101561074b57600060cf828154811061056157634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316905060006040518060800160405280836001600160a01b03168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261061291908101906132c2565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561065057600080fd5b505afa158015610664573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261068c91908101906132c2565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ca57600080fd5b505afa1580156106de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610702919061343f565b60ff1681525090508084848151811061072b57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061074390613a3f565b915050610534565b50905090565b6000805b88518110156108de5786818151811061077e57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff166000146108cc576108398982815181106107b357634e487b7160e01b600052603260045260246000fd5b6020026020010151858984815181106107dc57634e487b7160e01b600052603260045260246000fd5b602002602001015189858151811061080457634e487b7160e01b600052603260045260246000fd5b602002602001015189868151811061082c57634e487b7160e01b600052603260045260246000fd5b6020026020010151611d37565b61088a5760405162461bcd60e51b815260206004820181905260248201527f4f7261636c65207369676e617475726520646f6573206e6f74206d617463682e60448201526064015b60405180910390fd5b8781815181106108aa57634e487b7160e01b600052603260045260246000fd5b6020026020010151826108bd91906139a1565b9150828211156108cc576108de565b806108d681613a3f565b915050610755565b508181116108fe5760405162461bcd60e51b815260040161088190613703565b5050505050505050565b6000610912611e01565b60405163f2fde38b60e01b81526001600160a01b03838116600483015284169063f2fde38b90602401600060405180830381600087803b15801561095557600080fd5b505af1158015610969573d6000803e3d6000fd5b5050604080516001600160a01b038088168252861660208201527fb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699935001905060405180910390a150600192915050565b6109c2611e5b565b6109ca611eb5565b6001600160a01b038316600090815260d060209081526040918290208251606081018452905460ff8082161515835261010082048116151593830193909352620100009004909116151591810182905290610a375760405162461bcd60e51b81526004016108819061384a565b8060200151610a7b5760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881dd85cc81c185d5cd95960821b6044820152606401610881565b6020808601516001600160a01b038616600090815260ce90925260409091205410610b0e5760405162461bcd60e51b815260206004820152603760248201527f4e6577206261746368206e6f6e6365206d75737420626520677265617465722060448201527f7468616e207468652063757272656e74206e6f6e63652e0000000000000000006064820152608401610881565b824310610b835760405162461bcd60e51b815260206004820152603c60248201527f42617463682074696d656f7574206d757374206265206772656174657220746860448201527f616e207468652063757272656e7420626c6f636b206865696768742e000000006064820152608401610881565b8b518d51148015610b9557508a518d51145b8015610ba2575089518d51145b8015610baf575088518d51145b610bfb5760405162461bcd60e51b815260206004820152601d60248201527f4d616c666f726d65642063757272656e74206f7261636c65207365742e0000006044820152606401610881565b60cc54610c138e8e886000602002015160c9546114fc565b14610c305760405162461bcd60e51b8152600401610881906137a2565b86518851148015610c42575085518851145b610c8e5760405162461bcd60e51b815260206004820181905260248201527f4d616c666f726d6564206261746368206f66207472616e73616374696f6e732e6044820152606401610881565b610d0f8d8d8d8d8d60c9546f0e8e4c2dce6c2c6e8d2dedc84c2e8c6d60831b8f8f8f8f600160028110610cd157634e487b7160e01b600052603260045260246000fd5b60200201518f8f8f604051602001610cf1999897969594939291906135ff565b6040516020818303038152906040528051906020012060ca54610751565b6020808601516001600160a01b038616600090815260ce9092526040822055805b8951811015610e9c57610d73888281518110610d5c57634e487b7160e01b600052603260045260246000fd5b602002602001015183611efb90919063ffffffff16565b8351909250151560011415610e1e57856001600160a01b03166340c10f19308c8481518110610db257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610deb9291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015610e0557600080fd5b505af1158015610e19573d6000803e3d6000fd5b505050505b610e8a898281518110610e4157634e487b7160e01b600052603260045260246000fd5b60200260200101518b8381518110610e6957634e487b7160e01b600052603260045260246000fd5b6020026020010151886001600160a01b0316611f0e9092919063ffffffff16565b80610e9481613a3f565b915050610d30565b508151151560011415610f0a576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038616906340c10f1990604401600060405180830381600087803b158015610ef157600080fd5b505af1158015610f05573d6000803e3d6000fd5b505050505b610f1e6001600160a01b0386168483611f0e565b505060cb54610f2e906001611efb565b60cb556001600160a01b03831684600160200201517f02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab70860cb54604051610f7691815260200190565b60405180910390a3610f8760018055565b505050505050505050505050565b610f9d611eb5565b8387116110125760405162461bcd60e51b815260206004820152603b60248201527f4e6577206f7261636c6520736574206e6f6e6365206d7573742062652067726560448201527f61746572207468616e207468652063757272656e74206e6f6e636500000000006064820152608401610881565b87518951146110635760405162461bcd60e51b815260206004820152601860248201527f4d616c666f726d6564206e6577206f7261636c652073657400000000000000006044820152606401610881565b84518651148015611075575082518651145b8015611082575081518651145b801561108f575080518651145b6110db5760405162461bcd60e51b815260206004820152601c60248201527f4d616c666f726d65642063757272656e74206f7261636c6520736574000000006044820152606401610881565b60cc546110ec87878760c9546114fc565b146111095760405162461bcd60e51b8152600401610881906137a2565b60006111198a8a8a60c9546114fc565b905061112c87878686868660ca54610751565b60cc81905560cd88905560cb54611144906001611efb565b60cb81905560405189917f36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b39161117e91908e908e90613881565b60405180910390a250505050505050505050565b61119a611e01565b6111a2611f7c565b6111aa611fc5565b565b606080828060200190518101906111c391906132f4565b91509150915091565b60d180546111d990613a04565b80601f016020809104026020016040519081016040528092919081815260200182805461120590613a04565b80156112525780601f1061122757610100808354040283529160200191611252565b820191906000526020600020905b81548152906001019060200180831161123557829003601f168201915b505050505081565b611262611e5b565b61126a611eb5565b6000811161128a5760405162461bcd60e51b815260040161088190613760565b6001600160a01b038416600090815260d060209081526040918290208251606081018452905460ff80821615158352610100820481161515938301939093526201000090049091161515918101829052906112f75760405162461bcd60e51b81526004016108819061384a565b806020015161133b5760405162461bcd60e51b815260206004820152601060248201526f1d1bdad95b881dd85cc81c185d5cd95960821b6044820152606401610881565b6113506001600160a01b038616333085612017565b80511515600114156113b757604051630852cd8d60e31b8152600481018390526001600160a01b038616906342966c6890602401600060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b505050505b60cb546113c5906001611efb565b60cb819055604080518581526020810185905290810191909152849033906001600160a01b038816907f034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c9060600160405180910390a45061142560018055565b50505050565b600080611437836111ac565b9150915061144633838361204f565b60cb54611454906001611efb565b60cb556001600160a01b03878116908916336001600160a01b03167ff3c12a71331f7e9f7264151c99b059b83ed6d0c4afb08530c2253b9d871efe8d60cb548e8e8a8d8d8c6040516114ac97969594939291906138b6565b60405180910390a450505050505050505050565b60cf81815481106114d057600080fd5b6000918252602090912001546001600160a01b0316905081565b6114f2611e01565b6111aa60006120cd565b6040516000906918da1958dadc1bda5b9d60b21b90611527908490839087908a908a906020016135bc565b604051602081830303815290604052805190602001209150505b949350505050565b611551611e01565b611559611eb5565b6111aa61211f565b600061156b611e01565b6001600160a01b038216600090815260d0602052604090205462010000900460ff1615156001146115de5760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20646f65736e27742065786973747300000000006044820152606401610881565b6001600160a01b038216600090815260d0602052604090205460ff6101009091041615156001146116515760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20616c72656164792070617573656400000000006044820152606401610881565b506001600160a01b0316600090815260d060205260409020805461ff0019169055600190565b600054610100900460ff16158080156116975750600054600160ff909116105b806116b15750303b1580156116b1575060005460ff166001145b6117145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610881565b6000805460ff191660011790558015611737576000805461ff0019166101001790555b61173f61215c565b61174761218b565b61174f6121ba565b81518351146117a05760405162461bcd60e51b815260206004820152601c60248201527f4d616c666f726d65642063757272656e74206f7261636c6520736574000000006044820152606401610881565b6000805b8351811015611801578381815181106117cd57634e487b7160e01b600052603260045260246000fd5b6020026020010151826117e091906139a1565b9150858211156117ef57611801565b806117f981613a3f565b9150506117a4565b508481116118215760405162461bcd60e51b815260040161088190613703565b6000611830858560008a6114fc565b60c988905560ca87905560cc819055600060cd55600160cb55604080518082019091526005808252640312e302e360dc1b60209092019182529192506118799160d19190612950565b5060cd547f36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b360cb5487876040516118b293929190613881565b60405180910390a250508015611902576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000611913611e01565b6001600160a01b038216600090815260d0602052604090205462010000900460ff1615156001146119865760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20646f65736e27742065786973747300000000006044820152606401610881565b6001600160a01b038216600090815260d06020526040902054610100900460ff16156119f45760405162461bcd60e51b815260206004820152601c60248201527f42726964676520746f6b656e20616c72656164792061637469766564000000006044820152606401610881565b506001600160a01b0316600090815260d060205260409020805461ff001916610100179055600190565b6000611a28611e01565b6001600160a01b038416611a765760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610881565b6001600160a01b038416600090815260d0602052604090205462010000900460ff1615611ae55760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20616c72656164792065786973747300000000006044820152606401610881565b611b118460405180606001604052808515158152602001600115158152602001600115158152506121e9565b836001600160a01b03167f2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f856001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015611b7557600080fd5b505afa158015611b89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bb191908101906132c2565b866001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611bea57600080fd5b505afa158015611bfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c2691908101906132c2565b876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5f57600080fd5b505afa158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c97919061343f565b60cb5488604051611cac9594939291906136bd565b60405180910390a25060019392505050565b611cc6611e01565b6001600160a01b038116611d2b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610881565b611d34816120cd565b50565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018590526000908190605c0160408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015611dd7573d6000803e3d6000fd5b505050602060405103516001600160a01b0316876001600160a01b03161491505095945050505050565b6065546001600160a01b031633146111aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610881565b60026001541415611eae5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610881565b6002600155565b60975460ff16156111aa5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610881565b6000611f0782846139a1565b9392505050565b6040516001600160a01b038316602482015260448101829052611f7190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612295565b505050565b60018055565b60975460ff166111aa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610881565b611fcd611f7c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b03808516602483015283166044820152606481018290526114259085906323b872dd60e01b90608401611f3a565b815160208301207f8ae85d849167ff996c04040c44924fd364217285e4cad818292c7ac37c0a345b141561208c576120878382612367565b611f71565b60405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081d1e5c19481b9bdd081cdd5c1c1bdc9d60521b6044820152606401610881565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612127611eb5565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ffa3390565b600054610100900460ff166121835760405162461bcd60e51b8152600401610881906137ff565b6111aa6125e9565b600054610100900460ff166121b25760405162461bcd60e51b8152600401610881906137ff565b6111aa61261c565b600054610100900460ff166121e15760405162461bcd60e51b8152600401610881906137ff565b6111aa61264c565b60cf805460018082019092557facb8d954e2cfef495862221e91bd7523613cf8808827cb33edfe4904cc51bf290180546001600160a01b0319166001600160a01b038516908117909155600090815260d0602090815260409182902084518154928601519386015160ff199093169015151761ff001916610100931515939093029290921762ff00001916620100009115159190910217905560cb5461228e91611efb565b60cb555050565b60006122ea826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126739092919063ffffffff16565b805190915015611f7157808060200190518101906123089190613149565b611f715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610881565b60008061237383612682565b9150915060005b82518110156119025760008282815181106123a557634e487b7160e01b600052603260045260246000fd5b6020026020010151116123ca5760405162461bcd60e51b815260040161088190613760565b600060d060008584815181106123f057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528181019290925260409081016000208151606081018352905460ff808216151583526101008204811615159483019490945262010000900490921615159082018190529091506124695760405162461bcd60e51b81526004016108819061384a565b80602001516124ad5760405162461bcd60e51b815260206004820152601060248201526f1d1bdad95b881dd85cc81c185d5cd95960821b6044820152606401610881565b61251b86308585815181106124d257634e487b7160e01b600052603260045260246000fd5b60200260200101518786815181106124fa57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316612017909392919063ffffffff16565b80511515600114156125d65783828151811061254757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166342966c6884848151811061257d57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016125a391815260200190565b600060405180830381600087803b1580156125bd57600080fd5b505af11580156125d1573d6000803e3d6000fd5b505050505b50806125e181613a3f565b91505061237a565b600054610100900460ff166126105760405162461bcd60e51b8152600401610881906137ff565b6097805460ff19169055565b600054610100900460ff166126435760405162461bcd60e51b8152600401610881906137ff565b6111aa336120cd565b600054610100900460ff16611f765760405162461bcd60e51b8152600401610881906137ff565b606061154184846000856127da565b6060806000808480602001905181019061269c919061320a565b805191935091506126ae8160146139b9565b8351146126f65760405162461bcd60e51b8152602060048201526016602482015275151bdad95b881b9bdd081b585d18da08185b5bdd5b9d60521b6044820152606401610881565b6000816001600160401b0381111561271e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612747578160200160208202803683370190505b50905060005b828110156127cd5760006127628260146139b9565b61276d9060146139a1565b905060008187015190508084848151811061279857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050505080806127c590613a3f565b91505061274d565b5094509092505050915091565b60608247101561283b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610881565b600080866001600160a01b0316858760405161285791906134f9565b60006040518083038185875af1925050503d8060008114612894576040519150601f19603f3d011682016040523d82523d6000602084013e612899565b606091505b50915091506128aa878383876128b5565b979650505050505050565b6060831561292157825161291a576001600160a01b0385163b61291a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610881565b5081611541565b61154183838151156129365781518083602001fd5b8060405162461bcd60e51b8152600401610881919061367c565b82805461295c90613a04565b90600052602060002090601f01602090048101928261297e57600085556129c4565b82601f1061299757805160ff19168380011785556129c4565b828001600101855582156129c4579182015b828111156129c45782518255916020019190600101906129a9565b506129d09291506129d4565b5090565b5b808211156129d057600081556001016129d5565b60006129fc6129f78461397a565b613927565b9050828152838383011115612a1057600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461049357600080fd5b600082601f830112612a4e578081fd5b81356020612a5e6129f783613957565b8281528181019085830183850287018401881015612a7a578586fd5b855b85811015612a9f57612a8d82612a27565b84529284019290840190600101612a7c565b5090979650505050505050565b600082601f830112612abc578081fd5b81356020612acc6129f783613957565b8281528181019085830183850287018401881015612ae8578586fd5b855b85811015612a9f57813584529284019290840190600101612aea565b600082601f830112612b16578081fd5b612b206040613927565b808385604086011115612b31578384fd5b835b6002811015612b52578135845260209384019390910190600101612b33565b509095945050505050565b600082601f830112612b6d578081fd5b81356020612b7d6129f783613957565b8281528181019085830183850287018401881015612b99578586fd5b855b85811015612a9f578135612bae81613a94565b84529284019290840190600101612b9b565b60008083601f840112612bd1578182fd5b5081356001600160401b03811115612be7578182fd5b602083019150836020828501011115612bff57600080fd5b9250929050565b600082601f830112612c16578081fd5b611f07838335602085016129e9565b600082601f830112612c35578081fd5b8151612c436129f78261397a565b818152846020838601011115612c57578283fd5b6115418260208301602087016139d8565b600060208284031215612c79578081fd5b611f0782612a27565b60008060408385031215612c94578081fd5b612c9d83612a27565b9150612cab60208401612a27565b90509250929050565b600080600060608486031215612cc8578081fd5b612cd184612a27565b9250602084013591506040840135612ce881613a86565b809150509250925092565b60008060008060808587031215612d08578182fd5b612d1185612a27565b966020860135965060408601359560600135945092505050565b6000806000806000806000806000806000806101a08d8f031215612d4d57898afd5b6001600160401b038d351115612d6157898afd5b612d6e8e8e358f01612a3e565b9b506001600160401b0360208e01351115612d8757898afd5b612d978e60208f01358f01612aac565b9a506001600160401b0360408e01351115612db057898afd5b612dc08e60408f01358f01612b5d565b99506001600160401b0360608e01351115612dd9578788fd5b612de98e60608f01358f01612aac565b98506001600160401b0360808e01351115612e02578788fd5b612e128e60808f01358f01612aac565b97506001600160401b0360a08e01351115612e2b578687fd5b612e3b8e60a08f01358f01612aac565b96506001600160401b0360c08e01351115612e54578586fd5b612e648e60c08f01358f01612a3e565b95506001600160401b0360e08e01351115612e7d578485fd5b612e8d8e60e08f01358f01612aac565b9450612e9d8e6101008f01612b06565b9350612eac6101408e01612a27565b92506101608d01359150612ec36101808e01612a27565b90509295989b509295989b509295989b565b600080600080600080600060e0888a031215612eef578081fd5b87356001600160401b0380821115612f05578283fd5b612f118b838c01612a3e565b985060208a0135915080821115612f26578283fd5b612f328b838c01612aac565b975060408a0135915080821115612f47578283fd5b612f538b838c01612b5d565b965060608a0135915080821115612f68578283fd5b612f748b838c01612aac565b955060808a0135915080821115612f89578283fd5b50612f968a828b01612aac565b93505060a0880135915060c0880135905092959891949750929550565b60008060008060008060008060006101208a8c031215612fd1578283fd5b89356001600160401b0380821115612fe7578485fd5b612ff38d838e01612a3e565b9a5060208c0135915080821115613008578485fd5b6130148d838e01612aac565b995060408c0135985060608c0135915080821115613030578485fd5b61303c8d838e01612a3e565b975060808c0135915080821115613051578485fd5b61305d8d838e01612aac565b965060a08c0135955060c08c0135915080821115613079578485fd5b6130858d838e01612b5d565b945060e08c013591508082111561309a578384fd5b6130a68d838e01612aac565b93506101008c01359150808211156130bc578283fd5b506130c98c828d01612aac565b9150509295985092959850929598565b600080600080608085870312156130ee578182fd5b84356001600160401b0380821115613104578384fd5b61311088838901612a3e565b95506020870135915080821115613125578384fd5b5061313287828801612aac565b949794965050505060408301359260600135919050565b60006020828403121561315a578081fd5b8151611f0781613a86565b6000806000806080858703121561317a578182fd5b843593506020850135925060408501356001600160401b038082111561319e578384fd5b6131aa88838901612a3e565b935060608701359150808211156131bf578283fd5b506131cc87828801612aac565b91505092959194509250565b6000602082840312156131e9578081fd5b81356001600160401b038111156131fe578182fd5b61154184828501612c06565b6000806040838503121561321c578182fd5b82516001600160401b0380821115613232578384fd5b61323e86838701612c25565b9350602091508185015181811115613254578384fd5b85019050601f81018613613266578283fd5b80516132746129f782613957565b81815283810190838501858402850186018a1015613290578687fd5b8694505b838510156132b2578051835260019490940193918501918501613294565b5080955050505050509250929050565b6000602082840312156132d3578081fd5b81516001600160401b038111156132e8578182fd5b61154184828501612c25565b60008060408385031215613306578182fd5b82516001600160401b038082111561331c578384fd5b61332886838701612c25565b9350602085015191508082111561333d578283fd5b5061334a85828601612c25565b9150509250929050565b60008060008060008060008060e0898b03121561336f578182fd5b88356001600160401b0380821115613385578384fd5b818b0191508b601f830112613398578384fd5b6133a78c8335602085016129e9565b995060208b013598506133bc60408c01612a27565b97506133ca60608c01612a27565b965060808b01359150808211156133df578384fd5b6133eb8c838d01612bc0565b909650945060a08b0135935060c08b013591508082111561340a578283fd5b506134178b828c01612c06565b9150509295985092959890939650565b600060208284031215613438578081fd5b5035919050565b600060208284031215613450578081fd5b8151611f0781613a94565b6000815180845260208085019450808401835b838110156134935781516001600160a01b03168752958201959082019060010161346e565b509495945050505050565b6000815180845260208085019450808401835b83811015613493578151875295820195908201906001016134b1565b600081518084526134e58160208601602086016139d8565b601f01601f19169290920160200192915050565b6000825161350b8184602087016139d8565b9190910192915050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156135ae57888303603f19018552815180516001600160a01b0316845287810151608089860181905290613572828701826134cd565b915050878201518582038987015261358a82826134cd565b60609384015160ff1696909301959095525094870194925090860190600101613539565b509098975050505050505050565b600086825285602083015284604083015260a060608301526135e160a083018561345b565b82810360808401526135f3818561349e565b98975050505050505050565b60006101208b83528a602084015280604084015261361f8184018b61349e565b90508281036060840152613633818a61345b565b90508281036080840152613647818961349e565b60a084019790975250506001600160a01b0393841660c082015260e08101929092529091166101009091015295945050505050565b600060208252611f0760208301846134cd565b6000604082526136a260408301856134cd565b82810360208401526136b481856134cd565b95945050505050565b600060a082526136d060a08301886134cd565b82810360208401526136e281886134cd565b60ff9690961660408401525050606081019290925260809091015292915050565b60208082526039908201527f5375626d6974746564206f7261636c6520736574207369676e6174757265732060408201527f646f206e6f74206861766520656e6f75676820706f7765722e00000000000000606082015260800190565b60208082526022908201527f616d6f756e742073686f756c642062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b6020808252603c908201527f537570706c6965642063757272656e74206f7261636c657320616e6420706f7760408201527f65727320646f206e6f74206d6174636820636865636b706f696e742e00000000606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526019908201527f556e737570706f7274656420746f6b656e206164647265737300000000000000604082015260600190565b60008482526060602083015261389a606083018561345b565b82810360408401526138ac818561349e565b9695505050505050565b600088825260c060208301526138cf60c08301896134cd565b8760408401528660608401528281036080840152848152848660208301378160208683010152601f19601f8601168101905060208382030160a084015261391960208201856134cd565b9a9950505050505050505050565b604051601f8201601f191681016001600160401b038111828210171561394f5761394f613a70565b604052919050565b60006001600160401b0382111561397057613970613a70565b5060209081020190565b60006001600160401b0382111561399357613993613a70565b50601f01601f191660200190565b600082198211156139b4576139b4613a5a565b500190565b60008160001904831182151516156139d3576139d3613a5a565b500290565b60005b838110156139f35781810151838201526020016139db565b838111156114255750506000910152565b600281046001821680613a1857607f821691505b60208210811415613a3957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613a5357613a53613a5a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611d3457600080fd5b60ff81168114611d3457600080fdfea26469706673582212202f33686ef4450e92c5f5f14b491cb033655e23e760c06f29115fa9e94595c69b64736f6c63430008020033"

// DeployFxBridgeLogic deploys a new Ethereum contract, binding an instance of FxBridgeLogic to it.
func DeployFxBridgeLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FxBridgeLogic, error) {
	parsed, err := abi.JSON(strings.NewReader(FxBridgeLogicABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FxBridgeLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FxBridgeLogic{FxBridgeLogicCaller: FxBridgeLogicCaller{contract: contract}, FxBridgeLogicTransactor: FxBridgeLogicTransactor{contract: contract}, FxBridgeLogicFilterer: FxBridgeLogicFilterer{contract: contract}}, nil
}

// FxBridgeLogic is an auto generated Go binding around an Ethereum contract.
type FxBridgeLogic struct {
	FxBridgeLogicCaller     // Read-only binding to the contract
	FxBridgeLogicTransactor // Write-only binding to the contract
	FxBridgeLogicFilterer   // Log filterer for contract events
}

// FxBridgeLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type FxBridgeLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FxBridgeLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FxBridgeLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FxBridgeLogicSession struct {
	Contract     *FxBridgeLogic    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FxBridgeLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FxBridgeLogicCallerSession struct {
	Contract *FxBridgeLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// FxBridgeLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FxBridgeLogicTransactorSession struct {
	Contract     *FxBridgeLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// FxBridgeLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type FxBridgeLogicRaw struct {
	Contract *FxBridgeLogic // Generic contract binding to access the raw methods on
}

// FxBridgeLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FxBridgeLogicCallerRaw struct {
	Contract *FxBridgeLogicCaller // Generic read-only contract binding to access the raw methods on
}

// FxBridgeLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FxBridgeLogicTransactorRaw struct {
	Contract *FxBridgeLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFxBridgeLogic creates a new instance of FxBridgeLogic, bound to a specific deployed contract.
func NewFxBridgeLogic(address common.Address, backend bind.ContractBackend) (*FxBridgeLogic, error) {
	contract, err := bindFxBridgeLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogic{FxBridgeLogicCaller: FxBridgeLogicCaller{contract: contract}, FxBridgeLogicTransactor: FxBridgeLogicTransactor{contract: contract}, FxBridgeLogicFilterer: FxBridgeLogicFilterer{contract: contract}}, nil
}

// NewFxBridgeLogicCaller creates a new read-only instance of FxBridgeLogic, bound to a specific deployed contract.
func NewFxBridgeLogicCaller(address common.Address, caller bind.ContractCaller) (*FxBridgeLogicCaller, error) {
	contract, err := bindFxBridgeLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicCaller{contract: contract}, nil
}

// NewFxBridgeLogicTransactor creates a new write-only instance of FxBridgeLogic, bound to a specific deployed contract.
func NewFxBridgeLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*FxBridgeLogicTransactor, error) {
	contract, err := bindFxBridgeLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicTransactor{contract: contract}, nil
}

// NewFxBridgeLogicFilterer creates a new log filterer instance of FxBridgeLogic, bound to a specific deployed contract.
func NewFxBridgeLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*FxBridgeLogicFilterer, error) {
	contract, err := bindFxBridgeLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicFilterer{contract: contract}, nil
}

// bindFxBridgeLogic binds a generic wrapper to an already deployed contract.
func bindFxBridgeLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FxBridgeLogicABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FxBridgeLogic *FxBridgeLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FxBridgeLogic.Contract.FxBridgeLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FxBridgeLogic *FxBridgeLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.FxBridgeLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FxBridgeLogic *FxBridgeLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.FxBridgeLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FxBridgeLogic *FxBridgeLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FxBridgeLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FxBridgeLogic *FxBridgeLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FxBridgeLogic *FxBridgeLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.contract.Transact(opts, method, params...)
}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogic *FxBridgeLogicCaller) BridgeTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "bridgeTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogic *FxBridgeLogicSession) BridgeTokens(arg0 *big.Int) (common.Address, error) {
	return _FxBridgeLogic.Contract.BridgeTokens(&_FxBridgeLogic.CallOpts, arg0)
}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) BridgeTokens(arg0 *big.Int) (common.Address, error) {
	return _FxBridgeLogic.Contract.BridgeTokens(&_FxBridgeLogic.CallOpts, arg0)
}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicCaller) CheckAssetStatus(opts *bind.CallOpts, _tokenAddr common.Address) (bool, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "checkAssetStatus", _tokenAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) CheckAssetStatus(_tokenAddr common.Address) (bool, error) {
	return _FxBridgeLogic.Contract.CheckAssetStatus(&_FxBridgeLogic.CallOpts, _tokenAddr)
}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) CheckAssetStatus(_tokenAddr common.Address) (bool, error) {
	return _FxBridgeLogic.Contract.CheckAssetStatus(&_FxBridgeLogic.CallOpts, _tokenAddr)
}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogic *FxBridgeLogicCaller) CheckOracleSignatures(opts *bind.CallOpts, _currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "checkOracleSignatures", _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)

	if err != nil {
		return err
	}

	return err

}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogic *FxBridgeLogicSession) CheckOracleSignatures(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	return _FxBridgeLogic.Contract.CheckOracleSignatures(&_FxBridgeLogic.CallOpts, _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)
}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogic *FxBridgeLogicCallerSession) CheckOracleSignatures(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	return _FxBridgeLogic.Contract.CheckOracleSignatures(&_FxBridgeLogic.CallOpts, _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)
}

// DecodeType is a free data retrieval call binding the contract method 0x4157a36c.
//
// Solidity: function decodeType(bytes _asset) pure returns(string, bytes)
func (_FxBridgeLogic *FxBridgeLogicCaller) DecodeType(opts *bind.CallOpts, _asset []byte) (string, []byte, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "decodeType", _asset)

	if err != nil {
		return *new(string), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return out0, out1, err

}

// DecodeType is a free data retrieval call binding the contract method 0x4157a36c.
//
// Solidity: function decodeType(bytes _asset) pure returns(string, bytes)
func (_FxBridgeLogic *FxBridgeLogicSession) DecodeType(_asset []byte) (string, []byte, error) {
	return _FxBridgeLogic.Contract.DecodeType(&_FxBridgeLogic.CallOpts, _asset)
}

// DecodeType is a free data retrieval call binding the contract method 0x4157a36c.
//
// Solidity: function decodeType(bytes _asset) pure returns(string, bytes)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) DecodeType(_asset []byte) (string, []byte, error) {
	return _FxBridgeLogic.Contract.DecodeType(&_FxBridgeLogic.CallOpts, _asset)
}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogic *FxBridgeLogicCaller) GetBridgeTokenList(opts *bind.CallOpts) ([]FxBridgeLogicBridgeToken, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "getBridgeTokenList")

	if err != nil {
		return *new([]FxBridgeLogicBridgeToken), err
	}

	out0 := *abi.ConvertType(out[0], new([]FxBridgeLogicBridgeToken)).(*[]FxBridgeLogicBridgeToken)

	return out0, err

}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogic *FxBridgeLogicSession) GetBridgeTokenList() ([]FxBridgeLogicBridgeToken, error) {
	return _FxBridgeLogic.Contract.GetBridgeTokenList(&_FxBridgeLogic.CallOpts)
}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogic *FxBridgeLogicCallerSession) GetBridgeTokenList() ([]FxBridgeLogicBridgeToken, error) {
	return _FxBridgeLogic.Contract.GetBridgeTokenList(&_FxBridgeLogic.CallOpts)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) LastBatchNonce(opts *bind.CallOpts, _erc20Address common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "lastBatchNonce", _erc20Address)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _FxBridgeLogic.Contract.LastBatchNonce(&_FxBridgeLogic.CallOpts, _erc20Address)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _FxBridgeLogic.Contract.LastBatchNonce(&_FxBridgeLogic.CallOpts, _erc20Address)
}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCaller) MakeCheckpoint(opts *bind.CallOpts, _oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "makeCheckpoint", _oracles, _powers, _oracleSetNonce, _fxBridgeId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicSession) MakeCheckpoint(_oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	return _FxBridgeLogic.Contract.MakeCheckpoint(&_FxBridgeLogic.CallOpts, _oracles, _powers, _oracleSetNonce, _fxBridgeId)
}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) MakeCheckpoint(_oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	return _FxBridgeLogic.Contract.MakeCheckpoint(&_FxBridgeLogic.CallOpts, _oracles, _powers, _oracleSetNonce, _fxBridgeId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogic *FxBridgeLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogic *FxBridgeLogicSession) Owner() (common.Address, error) {
	return _FxBridgeLogic.Contract.Owner(&_FxBridgeLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) Owner() (common.Address, error) {
	return _FxBridgeLogic.Contract.Owner(&_FxBridgeLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) Paused() (bool, error) {
	return _FxBridgeLogic.Contract.Paused(&_FxBridgeLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) Paused() (bool, error) {
	return _FxBridgeLogic.Contract.Paused(&_FxBridgeLogic.CallOpts)
}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateFxBridgeId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_fxBridgeId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicSession) StateFxBridgeId() ([32]byte, error) {
	return _FxBridgeLogic.Contract.StateFxBridgeId(&_FxBridgeLogic.CallOpts)
}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateFxBridgeId() ([32]byte, error) {
	return _FxBridgeLogic.Contract.StateFxBridgeId(&_FxBridgeLogic.CallOpts)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateLastBatchNonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_lastBatchNonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastBatchNonces(&_FxBridgeLogic.CallOpts, arg0)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastBatchNonces(&_FxBridgeLogic.CallOpts, arg0)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateLastEventNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_lastEventNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) StateLastEventNonce() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastEventNonce(&_FxBridgeLogic.CallOpts)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateLastEventNonce() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastEventNonce(&_FxBridgeLogic.CallOpts)
}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateLastOracleSetCheckpoint(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_lastOracleSetCheckpoint")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicSession) StateLastOracleSetCheckpoint() ([32]byte, error) {
	return _FxBridgeLogic.Contract.StateLastOracleSetCheckpoint(&_FxBridgeLogic.CallOpts)
}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateLastOracleSetCheckpoint() ([32]byte, error) {
	return _FxBridgeLogic.Contract.StateLastOracleSetCheckpoint(&_FxBridgeLogic.CallOpts)
}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateLastOracleSetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_lastOracleSetNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) StateLastOracleSetNonce() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastOracleSetNonce(&_FxBridgeLogic.CallOpts)
}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateLastOracleSetNonce() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastOracleSetNonce(&_FxBridgeLogic.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) StatePowerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_powerThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) StatePowerThreshold() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StatePowerThreshold(&_FxBridgeLogic.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StatePowerThreshold() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StatePowerThreshold(&_FxBridgeLogic.CallOpts)
}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogic *FxBridgeLogicCaller) TokenStatus(opts *bind.CallOpts, arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "tokenStatus", arg0)

	outstruct := new(struct {
		IsOriginated bool
		IsActive     bool
		IsExist      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IsOriginated = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.IsActive = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.IsExist = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogic *FxBridgeLogicSession) TokenStatus(arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	return _FxBridgeLogic.Contract.TokenStatus(&_FxBridgeLogic.CallOpts, arg0)
}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) TokenStatus(arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	return _FxBridgeLogic.Contract.TokenStatus(&_FxBridgeLogic.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogic *FxBridgeLogicCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogic *FxBridgeLogicSession) Version() (string, error) {
	return _FxBridgeLogic.Contract.Version(&_FxBridgeLogic.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) Version() (string, error) {
	return _FxBridgeLogic.Contract.Version(&_FxBridgeLogic.CallOpts)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactor) ActiveBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "activeBridgeToken", _tokenAddr)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) ActiveBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.ActiveBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) ActiveBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.ActiveBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactor) AddBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "addBridgeToken", _tokenAddr, _channelIBC, _isOriginated)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) AddBridgeToken(_tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.AddBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr, _channelIBC, _isOriginated)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) AddBridgeToken(_tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.AddBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr, _channelIBC, _isOriginated)
}

// BridgeCall is a paid mutator transaction binding the contract method 0x6907f2e6.
//
// Solidity: function bridgeCall(string _dstChainId, uint256 _gasLimit, address _receiver, address _to, bytes _message, uint256 _value, bytes _asset) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) BridgeCall(opts *bind.TransactOpts, _dstChainId string, _gasLimit *big.Int, _receiver common.Address, _to common.Address, _message []byte, _value *big.Int, _asset []byte) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "bridgeCall", _dstChainId, _gasLimit, _receiver, _to, _message, _value, _asset)
}

// BridgeCall is a paid mutator transaction binding the contract method 0x6907f2e6.
//
// Solidity: function bridgeCall(string _dstChainId, uint256 _gasLimit, address _receiver, address _to, bytes _message, uint256 _value, bytes _asset) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) BridgeCall(_dstChainId string, _gasLimit *big.Int, _receiver common.Address, _to common.Address, _message []byte, _value *big.Int, _asset []byte) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.BridgeCall(&_FxBridgeLogic.TransactOpts, _dstChainId, _gasLimit, _receiver, _to, _message, _value, _asset)
}

// BridgeCall is a paid mutator transaction binding the contract method 0x6907f2e6.
//
// Solidity: function bridgeCall(string _dstChainId, uint256 _gasLimit, address _receiver, address _to, bytes _message, uint256 _value, bytes _asset) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) BridgeCall(_dstChainId string, _gasLimit *big.Int, _receiver common.Address, _to common.Address, _message []byte, _value *big.Int, _asset []byte) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.BridgeCall(&_FxBridgeLogic.TransactOpts, _dstChainId, _gasLimit, _receiver, _to, _message, _value, _asset)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) Init(opts *bind.TransactOpts, _fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "init", _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) Init(_fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Init(&_FxBridgeLogic.TransactOpts, _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) Init(_fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Init(&_FxBridgeLogic.TransactOpts, _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogic *FxBridgeLogicSession) Pause() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Pause(&_FxBridgeLogic.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) Pause() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Pause(&_FxBridgeLogic.TransactOpts)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactor) PauseBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "pauseBridgeToken", _tokenAddr)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) PauseBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.PauseBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) PauseBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.PauseBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogic *FxBridgeLogicSession) RenounceOwnership() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.RenounceOwnership(&_FxBridgeLogic.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.RenounceOwnership(&_FxBridgeLogic.TransactOpts)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) SendToFx(opts *bind.TransactOpts, _tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "sendToFx", _tokenContract, _destination, _targetIBC, _amount)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) SendToFx(_tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.SendToFx(&_FxBridgeLogic.TransactOpts, _tokenContract, _destination, _targetIBC, _amount)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) SendToFx(_tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.SendToFx(&_FxBridgeLogic.TransactOpts, _tokenContract, _destination, _targetIBC, _amount)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) SubmitBatch(opts *bind.TransactOpts, _currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "submitBatch", _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) SubmitBatch(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.SubmitBatch(&_FxBridgeLogic.TransactOpts, _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) SubmitBatch(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.SubmitBatch(&_FxBridgeLogic.TransactOpts, _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactor) TransferOwner(opts *bind.TransactOpts, _token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "transferOwner", _token, _newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) TransferOwner(_token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.TransferOwner(&_FxBridgeLogic.TransactOpts, _token, _newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) TransferOwner(_token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.TransferOwner(&_FxBridgeLogic.TransactOpts, _token, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.TransferOwnership(&_FxBridgeLogic.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.TransferOwnership(&_FxBridgeLogic.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogic *FxBridgeLogicSession) Unpause() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Unpause(&_FxBridgeLogic.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) Unpause() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Unpause(&_FxBridgeLogic.TransactOpts)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) UpdateOracleSet(opts *bind.TransactOpts, _newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "updateOracleSet", _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) UpdateOracleSet(_newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.UpdateOracleSet(&_FxBridgeLogic.TransactOpts, _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) UpdateOracleSet(_newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.UpdateOracleSet(&_FxBridgeLogic.TransactOpts, _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// FxBridgeLogicAddBridgeTokenEventIterator is returned from FilterAddBridgeTokenEvent and is used to iterate over the raw logs and unpacked data for AddBridgeTokenEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicAddBridgeTokenEventIterator struct {
	Event *FxBridgeLogicAddBridgeTokenEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicAddBridgeTokenEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicAddBridgeTokenEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicAddBridgeTokenEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicAddBridgeTokenEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicAddBridgeTokenEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicAddBridgeTokenEvent represents a AddBridgeTokenEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicAddBridgeTokenEvent struct {
	TokenContract common.Address
	Name          string
	Symbol        string
	Decimals      uint8
	EventNonce    *big.Int
	ChannelIBC    [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAddBridgeTokenEvent is a free log retrieval operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterAddBridgeTokenEvent(opts *bind.FilterOpts, _tokenContract []common.Address) (*FxBridgeLogicAddBridgeTokenEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "AddBridgeTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicAddBridgeTokenEventIterator{contract: _FxBridgeLogic.contract, event: "AddBridgeTokenEvent", logs: logs, sub: sub}, nil
}

// WatchAddBridgeTokenEvent is a free log subscription operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchAddBridgeTokenEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicAddBridgeTokenEvent, _tokenContract []common.Address) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "AddBridgeTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicAddBridgeTokenEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "AddBridgeTokenEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddBridgeTokenEvent is a log parse operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseAddBridgeTokenEvent(log types.Log) (*FxBridgeLogicAddBridgeTokenEvent, error) {
	event := new(FxBridgeLogicAddBridgeTokenEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "AddBridgeTokenEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicBridgeCallEventIterator is returned from FilterBridgeCallEvent and is used to iterate over the raw logs and unpacked data for BridgeCallEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicBridgeCallEventIterator struct {
	Event *FxBridgeLogicBridgeCallEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBridgeCallEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBridgeCallEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBridgeCallEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBridgeCallEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBridgeCallEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBridgeCallEvent represents a BridgeCallEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicBridgeCallEvent struct {
	Sender     common.Address
	Receiver   common.Address
	To         common.Address
	EventNonce *big.Int
	DstChainId string
	GasLimit   *big.Int
	Value      *big.Int
	Message    []byte
	Asset      []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBridgeCallEvent is a free log retrieval operation binding the contract event 0xf3c12a71331f7e9f7264151c99b059b83ed6d0c4afb08530c2253b9d871efe8d.
//
// Solidity: event BridgeCallEvent(address indexed _sender, address indexed _receiver, address indexed _to, uint256 _eventNonce, string _dstChainId, uint256 _gasLimit, uint256 _value, bytes _message, bytes _asset)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterBridgeCallEvent(opts *bind.FilterOpts, _sender []common.Address, _receiver []common.Address, _to []common.Address) (*FxBridgeLogicBridgeCallEventIterator, error) {

	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _receiverRule []interface{}
	for _, _receiverItem := range _receiver {
		_receiverRule = append(_receiverRule, _receiverItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "BridgeCallEvent", _senderRule, _receiverRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBridgeCallEventIterator{contract: _FxBridgeLogic.contract, event: "BridgeCallEvent", logs: logs, sub: sub}, nil
}

// WatchBridgeCallEvent is a free log subscription operation binding the contract event 0xf3c12a71331f7e9f7264151c99b059b83ed6d0c4afb08530c2253b9d871efe8d.
//
// Solidity: event BridgeCallEvent(address indexed _sender, address indexed _receiver, address indexed _to, uint256 _eventNonce, string _dstChainId, uint256 _gasLimit, uint256 _value, bytes _message, bytes _asset)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchBridgeCallEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBridgeCallEvent, _sender []common.Address, _receiver []common.Address, _to []common.Address) (event.Subscription, error) {

	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _receiverRule []interface{}
	for _, _receiverItem := range _receiver {
		_receiverRule = append(_receiverRule, _receiverItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "BridgeCallEvent", _senderRule, _receiverRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBridgeCallEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "BridgeCallEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeCallEvent is a log parse operation binding the contract event 0xf3c12a71331f7e9f7264151c99b059b83ed6d0c4afb08530c2253b9d871efe8d.
//
// Solidity: event BridgeCallEvent(address indexed _sender, address indexed _receiver, address indexed _to, uint256 _eventNonce, string _dstChainId, uint256 _gasLimit, uint256 _value, bytes _message, bytes _asset)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseBridgeCallEvent(log types.Log) (*FxBridgeLogicBridgeCallEvent, error) {
	event := new(FxBridgeLogicBridgeCallEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "BridgeCallEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the FxBridgeLogic contract.
type FxBridgeLogicInitializedIterator struct {
	Event *FxBridgeLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicInitialized represents a Initialized event raised by the FxBridgeLogic contract.
type FxBridgeLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*FxBridgeLogicInitializedIterator, error) {

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicInitializedIterator{contract: _FxBridgeLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicInitialized)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseInitialized(log types.Log) (*FxBridgeLogicInitialized, error) {
	event := new(FxBridgeLogicInitialized)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicOracleSetUpdatedEventIterator is returned from FilterOracleSetUpdatedEvent and is used to iterate over the raw logs and unpacked data for OracleSetUpdatedEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicOracleSetUpdatedEventIterator struct {
	Event *FxBridgeLogicOracleSetUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicOracleSetUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicOracleSetUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicOracleSetUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicOracleSetUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicOracleSetUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicOracleSetUpdatedEvent represents a OracleSetUpdatedEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicOracleSetUpdatedEvent struct {
	NewOracleSetNonce *big.Int
	EventNonce        *big.Int
	Oracles           []common.Address
	Powers            []*big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOracleSetUpdatedEvent is a free log retrieval operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterOracleSetUpdatedEvent(opts *bind.FilterOpts, _newOracleSetNonce []*big.Int) (*FxBridgeLogicOracleSetUpdatedEventIterator, error) {

	var _newOracleSetNonceRule []interface{}
	for _, _newOracleSetNonceItem := range _newOracleSetNonce {
		_newOracleSetNonceRule = append(_newOracleSetNonceRule, _newOracleSetNonceItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "OracleSetUpdatedEvent", _newOracleSetNonceRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicOracleSetUpdatedEventIterator{contract: _FxBridgeLogic.contract, event: "OracleSetUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchOracleSetUpdatedEvent is a free log subscription operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchOracleSetUpdatedEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicOracleSetUpdatedEvent, _newOracleSetNonce []*big.Int) (event.Subscription, error) {

	var _newOracleSetNonceRule []interface{}
	for _, _newOracleSetNonceItem := range _newOracleSetNonce {
		_newOracleSetNonceRule = append(_newOracleSetNonceRule, _newOracleSetNonceItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "OracleSetUpdatedEvent", _newOracleSetNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicOracleSetUpdatedEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "OracleSetUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleSetUpdatedEvent is a log parse operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseOracleSetUpdatedEvent(log types.Log) (*FxBridgeLogicOracleSetUpdatedEvent, error) {
	event := new(FxBridgeLogicOracleSetUpdatedEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "OracleSetUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FxBridgeLogic contract.
type FxBridgeLogicOwnershipTransferredIterator struct {
	Event *FxBridgeLogicOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicOwnershipTransferred represents a OwnershipTransferred event raised by the FxBridgeLogic contract.
type FxBridgeLogicOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FxBridgeLogicOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicOwnershipTransferredIterator{contract: _FxBridgeLogic.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicOwnershipTransferred)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseOwnershipTransferred(log types.Log) (*FxBridgeLogicOwnershipTransferred, error) {
	event := new(FxBridgeLogicOwnershipTransferred)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the FxBridgeLogic contract.
type FxBridgeLogicPausedIterator struct {
	Event *FxBridgeLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicPaused represents a Paused event raised by the FxBridgeLogic contract.
type FxBridgeLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*FxBridgeLogicPausedIterator, error) {

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicPausedIterator{contract: _FxBridgeLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicPaused) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicPaused)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParsePaused(log types.Log) (*FxBridgeLogicPaused, error) {
	event := new(FxBridgeLogicPaused)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicSendToFxEventIterator is returned from FilterSendToFxEvent and is used to iterate over the raw logs and unpacked data for SendToFxEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicSendToFxEventIterator struct {
	Event *FxBridgeLogicSendToFxEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicSendToFxEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicSendToFxEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicSendToFxEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicSendToFxEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicSendToFxEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicSendToFxEvent represents a SendToFxEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicSendToFxEvent struct {
	TokenContract common.Address
	Sender        common.Address
	Destination   [32]byte
	TargetIBC     [32]byte
	Amount        *big.Int
	EventNonce    *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSendToFxEvent is a free log retrieval operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterSendToFxEvent(opts *bind.FilterOpts, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (*FxBridgeLogicSendToFxEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "SendToFxEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicSendToFxEventIterator{contract: _FxBridgeLogic.contract, event: "SendToFxEvent", logs: logs, sub: sub}, nil
}

// WatchSendToFxEvent is a free log subscription operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchSendToFxEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicSendToFxEvent, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "SendToFxEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicSendToFxEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "SendToFxEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendToFxEvent is a log parse operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseSendToFxEvent(log types.Log) (*FxBridgeLogicSendToFxEvent, error) {
	event := new(FxBridgeLogicSendToFxEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "SendToFxEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicTransactionBatchExecutedEventIterator is returned from FilterTransactionBatchExecutedEvent and is used to iterate over the raw logs and unpacked data for TransactionBatchExecutedEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicTransactionBatchExecutedEventIterator struct {
	Event *FxBridgeLogicTransactionBatchExecutedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicTransactionBatchExecutedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicTransactionBatchExecutedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicTransactionBatchExecutedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicTransactionBatchExecutedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicTransactionBatchExecutedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicTransactionBatchExecutedEvent represents a TransactionBatchExecutedEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicTransactionBatchExecutedEvent struct {
	BatchNonce *big.Int
	Token      common.Address
	EventNonce *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransactionBatchExecutedEvent is a free log retrieval operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterTransactionBatchExecutedEvent(opts *bind.FilterOpts, _batchNonce []*big.Int, _token []common.Address) (*FxBridgeLogicTransactionBatchExecutedEventIterator, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicTransactionBatchExecutedEventIterator{contract: _FxBridgeLogic.contract, event: "TransactionBatchExecutedEvent", logs: logs, sub: sub}, nil
}

// WatchTransactionBatchExecutedEvent is a free log subscription operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchTransactionBatchExecutedEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicTransactionBatchExecutedEvent, _batchNonce []*big.Int, _token []common.Address) (event.Subscription, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicTransactionBatchExecutedEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionBatchExecutedEvent is a log parse operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseTransactionBatchExecutedEvent(log types.Log) (*FxBridgeLogicTransactionBatchExecutedEvent, error) {
	event := new(FxBridgeLogicTransactionBatchExecutedEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicTransferOwnerEventIterator is returned from FilterTransferOwnerEvent and is used to iterate over the raw logs and unpacked data for TransferOwnerEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicTransferOwnerEventIterator struct {
	Event *FxBridgeLogicTransferOwnerEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicTransferOwnerEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicTransferOwnerEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicTransferOwnerEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicTransferOwnerEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicTransferOwnerEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicTransferOwnerEvent represents a TransferOwnerEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicTransferOwnerEvent struct {
	Token    common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferOwnerEvent is a free log retrieval operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterTransferOwnerEvent(opts *bind.FilterOpts) (*FxBridgeLogicTransferOwnerEventIterator, error) {

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "TransferOwnerEvent")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicTransferOwnerEventIterator{contract: _FxBridgeLogic.contract, event: "TransferOwnerEvent", logs: logs, sub: sub}, nil
}

// WatchTransferOwnerEvent is a free log subscription operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchTransferOwnerEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicTransferOwnerEvent) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "TransferOwnerEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicTransferOwnerEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "TransferOwnerEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferOwnerEvent is a log parse operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseTransferOwnerEvent(log types.Log) (*FxBridgeLogicTransferOwnerEvent, error) {
	event := new(FxBridgeLogicTransferOwnerEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "TransferOwnerEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the FxBridgeLogic contract.
type FxBridgeLogicUnpausedIterator struct {
	Event *FxBridgeLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicUnpaused represents a Unpaused event raised by the FxBridgeLogic contract.
type FxBridgeLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*FxBridgeLogicUnpausedIterator, error) {

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicUnpausedIterator{contract: _FxBridgeLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicUnpaused)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseUnpaused(log types.Log) (*FxBridgeLogicUnpaused, error) {
	event := new(FxBridgeLogicUnpaused)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
